{"version":3,"file":"modal.js","sources":["../src/polyfills.js","../src/modal.js"],"sourcesContent":["/*----------------------\nCustom Event\n---\nhttps://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n----------------------*/\n\n(function () {\n\n    if (typeof window.CustomEvent === \"function\") return false;\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n    \n})();\n\n/*----------------------\nClosest\n---\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n----------------------*/\n\nif (!Element.prototype.matches)\n    Element.prototype.matches = Element.prototype.msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n        var el = this;\n        if (!document.documentElement.contains(el)) return null;\n        do {\n            if (el.matches(s)) return el;\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\n\n/*----------------------\nArray.from\n---\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n----------------------*/\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n    Array.from = (function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function (fn) {\n            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function (value) {\n            var number = Number(value);\n            if (isNaN(number)) { return 0; }\n            if (number === 0 || !isFinite(number)) { return number; }\n            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function (value) {\n            var len = toInteger(value);\n            return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n\n        // The length property of the from method is 1.\n        return function from(arrayLike/*, mapFn, thisArg */) {\n            // 1. Let C be the this value.\n            var C = this;\n\n            // 2. Let items be ToObject(arrayLike).\n            var items = Object(arrayLike);\n\n            // 3. ReturnIfAbrupt(items).\n            if (arrayLike == null) {\n                throw new TypeError('Array.from requires an array-like object - not null or undefined');\n            }\n\n            // 4. If mapfn is undefined, then let mapping be false.\n            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n            var T;\n            if (typeof mapFn !== 'undefined') {\n                // 5. else\n                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n                if (!isCallable(mapFn)) {\n                    throw new TypeError('Array.from: when provided, the second argument must be a function');\n                }\n\n                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n                if (arguments.length > 2) {\n                    T = arguments[2];\n                }\n            }\n\n            // 10. Let lenValue be Get(items, \"length\").\n            // 11. Let len be ToLength(lenValue).\n            var len = toLength(items.length);\n\n            // 13. If IsConstructor(C) is true, then\n            // 13. a. Let A be the result of calling the [[Construct]] internal method \n            // of C with an argument list containing the single item len.\n            // 14. a. Else, Let A be ArrayCreate(len).\n            var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\n            // 16. Let k be 0.\n            var k = 0;\n            // 17. Repeat, while k < lenâ€¦ (also steps a - h)\n            var kValue;\n            while (k < len) {\n                kValue = items[k];\n                if (mapFn) {\n                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n                } else {\n                    A[k] = kValue;\n                }\n                k += 1;\n            }\n            // 18. Let putStatus be Put(A, \"length\", len, true).\n            A.length = len;\n            // 20. Return A.\n            return A;\n        };\n    }());\n}","/*----------------------\nImports\n----------------------*/\n\nimport './polyfills';\n\n/*----------------------\nModal\n----------------------*/\n\nexport default function modal(customSettings = {}) {\n\n    /*----------------------\n    Settings\n    ----------------------*/\n\n    const defaultSettings = {\n        modalElement: '.modal',\n        modalTriggerElement: '.modal-trigger',\n        modalCloseElement: '.modal-close',\n        modalContentElement: '.modal__content',\n        modalContents: '.modal-content-to-show',\n        modalOpenClass: 'modal--is-open'\n    };\n\n    const settings = {...defaultSettings, ...customSettings};\n\n    /*----------------------\n    Functions\n    ----------------------*/\n\n    /**\n    * Open Modal\n    *\n    * @param   string  modalId       -  ID selector of the modal we want to open.\n    * @param   string  modalContent  -  Content to inject into the modal.\n    */\n\n    function openModal(modalId, modalContent) {\n\n        const modal = document.querySelector('#' + modalId);\n\n        const modalContentContainer = modal.querySelector(settings.modalContentElement);\n\n        // Set the modal content if there was content passed to this function\n\n        if(modalContent && modalContentContainer) {\n            modalContentContainer.innerHTML = modalContent;\n        }\n\n        modal.classList.add(settings.modalOpenClass);\n\n        // Dispatch Open Event\n\n        const openEvent = new CustomEvent('open');\n\n        modal.dispatchEvent(openEvent);\n\n    }\n\n    /**\n    * Close Modal\n    *\n    * @param   string  modalId       -  ID selector of the modal we want to open.\n    */\n\n    function closeModal(modalId) {\n\n        // Elements\n\n        const modal = document.querySelector('#' + modalId);\n\n        // Remove the open class from the modal.\n\n        modal.classList.remove(settings.modalOpenClass);\n\n        // Dispatch Close Event\n\n        const closeEvent = new CustomEvent('close');\n\n        modal.dispatchEvent(closeEvent);\n\n    }\n\n    /*----------------------\n    Event Listeners\n    ----------------------*/\n\n    // Modal Triggers\n\n    document.addEventListener('click', function (e) {\n\n        const trigger = e.target.closest(settings.modalTriggerElement);\n\n        if (trigger) {\n\n            e.preventDefault();\n\n            // Grab the modal ID.\n\n            const modalId = trigger.dataset.modalId;\n\n            // Grab the content element.\n\n            const modalContentElement = trigger.querySelector(settings.modalContents);\n\n            // If there is a content element within the modal trigger then that will be the content set in the modal.\n\n            const modalContent = modalContentElement ? modalContentElement.innerHTML : '';\n\n            // Open it up.\n\n            openModal(modalId, modalContent);\n\n        }\n\n    });\n\n    // Modal Close\n\n    document.addEventListener('click', function (e) {\n\n        const modalClose = e.target.closest(settings.modalCloseElement);\n\n        if (modalClose) {\n\n            e.preventDefault();\n\n            const modalId = modalClose.dataset.modalId;\n\n            // If an id data attribute exists on this close element then close the modal with that id property.\n\n            if(modalId) {\n\n                closeModal(modalId);\n\n            }\n\n            // Else no id data attribute was provided then find the closest modal. The close symbol likely exists within the modal element.\n\n            else {\n\n                // Find the modal associated with this close action.\n\n                const modal = modalClose.closest(settings.modalElement);\n\n                // Close it.\n\n                closeModal(modal.id);\n\n            }\n\n        }\n\n    });\n\n}"],"names":["toStr","isCallable","maxSafeInteger","toLength","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","Element","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","this","documentElement","contains","parentElement","parentNode","nodeType","Array","from","Object","toString","fn","call","Math","pow","value","len","number","Number","isNaN","isFinite","floor","abs","toInteger","min","max","arrayLike","items","TypeError","T","mapFn","arguments","length","kValue","A","k","customSettings","settings","modalElement","modalTriggerElement","modalCloseElement","modalContentElement","modalContents","modalOpenClass","closeModal","modalId","modal","querySelector","classList","remove","closeEvent","dispatchEvent","addEventListener","e","trigger","target","preventDefault","dataset","modalContent","modalContentContainer","innerHTML","add","openEvent","openModal","modalClose","id"],"mappings":"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"}